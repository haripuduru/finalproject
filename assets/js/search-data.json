{
  
    
        "post0": {
            "title": "Studying the Impact of Institutional Investors on a Equity stock performance",
            "content": "About Me . Name: Hariprasad Puduru . Date: 2022-09-02 . Project Title : Studying the Impact of Institutional Investors on a Equity stock performance . Appraoch . Firstly data selection will be based on the Institutional holdings of a common equity stock. I have made two groups of data, one group will have five stocks which have more than 99% instituional Holdings and another group will have five more stocks that will have less than 0.5% instituitonal holdings. S&amp;P500 data will be used for baselining purpose. The idea behind this is to see if Instituional investor has any say on the stock performance. Nasadaq and finviz is used to pick the top-5 stocks from the pool of highest and lowest institutional holdings and also which has at least fiver year of price data. . Stocks with &gt;99 % instituional holdings (here after GROUP A) . 1. Hilton Grand Vaccations Inc (HGV) . 2. Hilton Worldwide Holdings Inc (HLV) . 3. Berry Global Group Inc (BERY) . 4. Catalent Inc (CTLT) . 5. RE/MAX Holdings Inc (RMAX) . Stocks with &lt;0.5 % instituional holdings (here after GROUP B) . 1. Interlink Electronics Inc (LINK) . 2. Planet Green Holdings Corp(PLAG) . 3. Color Star Technology Co Ltd (CSCW) . 4. Agile Therapeutics Inc. (AGRX) . 5. Newegg Commerce Inc (NEGG) . I downloaded the 5 years of daily stock price data from Yahoo and put it in the stockdatafinal.xlsx file . What i am intend to find from this analysis and who is the target audience? . This analysis is intend for retail stock investors. I am trying to find how voltail are these stocks, what will be the daily and annually returns of the stock. How these stocks are fared against S&amp;P 500 Index. The outcome will help for retail investors to choose their stock portfolio according to their needs. . Key Assumptions . 1. Assumed there will be 252 trading days in a calendar year. . 2. Small sample size of data (5 stocks for each group) . 3. Only close price of last five years (2017-09-01 to 2022-08-31) is considered for the analysis . Method and tools . Python will be used to analyz stock data, python libraries pandas,numpy and matplotlib will be used. Will be calculating daily and annually returs, mean and standard deviation will be calculated. . import numpy as np import pandas as pd import matplotlib.pyplot as plt plt.rcParams[&quot;figure.figsize&quot;] = (20,8) . -#Importing Assests excel data sheet and storing in the assests data Frame. #Excel sheet consists of 5 years of close prce data for the 10 stocks and s&amp;p500 #Stock data date range 2017-09-01 to 2022-08-31 assets = pd.read_excel(&#39;stockdatafinal.xlsx&#39;) assets.head() . Date HGV HLT BERY CTLT RMAX LINK PLAG CSCW AGRX NEGG SP500 . 0 2017-09-01 | 36.540001 | 64.589996 | 56.849998 | 40.660000 | 63.299999 | 7.15 | 10.00 | 1.60 | 138.000000 | 10.08 | 2476.550049 | . 1 2017-09-05 | 36.110001 | 63.599998 | 56.270000 | 41.369999 | 61.599998 | 7.15 | 10.75 | 1.63 | 135.600006 | 10.24 | 2457.850098 | . 2 2017-09-06 | 35.650002 | 63.669998 | 56.000000 | 41.669998 | 61.150002 | 7.15 | 10.50 | 1.65 | 133.600006 | 10.32 | 2465.540039 | . 3 2017-09-07 | 35.599998 | 63.889999 | 56.450001 | 41.349998 | 60.400002 | 7.58 | 10.00 | 1.70 | 135.600006 | 10.08 | 2465.100098 | . 4 2017-09-08 | 35.299999 | 65.139999 | 56.310001 | 40.349998 | 60.500000 | 7.23 | 9.75 | 1.65 | 138.800003 | 10.08 | 2461.429932 | . assets=assets.set_index(pd.DatetimeIndex(assets[&#39;Date&#39;].values)) #Remove or drop the date column assets.drop([&#39;Date&#39;],inplace=True,axis=1) . plt.plot(assets[&#39;HGV&#39;],label=&#39;HGV&#39;) plt.plot(assets[&#39;HLT&#39;],label=&#39;HLT&#39;) plt.plot(assets[&#39;BERY&#39;],label=&#39;BERY&#39;) plt.plot(assets[&#39;CTLT&#39;],label=&#39;CTLT&#39;) plt.plot(assets[&#39;RMAX&#39;],label=&#39;RMAX&#39;) plt.plot(assets[&#39;LINK&#39;],label=&#39;LINK&#39;) plt.plot(assets[&#39;PLAG&#39;],label=&#39;PLAG&#39;) plt.plot(assets[&#39;CSCW&#39;],label=&#39;CSCW&#39;) plt.plot(assets[&#39;PLAG&#39;],label=&#39;PLAG&#39;) plt.plot(assets[&#39;NEGG&#39;],label=&#39;NEGG&#39;) plt.legend() plt.show() . above line graph shows stocks HLT and CTLT following almost similar trend, while NEGG stock fluctuates too much compared to other stocks. . Stock analysis based on simple returns . daily_simple_returns = assets.pct_change().dropna() #printing the daily returns daily_simple_returns . HGV HLT BERY CTLT RMAX LINK PLAG CSCW AGRX NEGG SP500 . 2017-09-05 -0.011768 | -0.015327 | -0.010202 | 0.017462 | -0.026856 | 0.000000 | 0.075000 | 0.018750 | -0.017391 | 0.015873 | -0.007551 | . 2017-09-06 -0.012739 | 0.001101 | -0.004798 | 0.007252 | -0.007305 | 0.000000 | -0.023256 | 0.012270 | -0.014749 | 0.007812 | 0.003129 | . 2017-09-07 -0.001403 | 0.003455 | 0.008036 | -0.007679 | -0.012265 | 0.060140 | -0.047619 | 0.030303 | 0.014970 | -0.023256 | -0.000178 | . 2017-09-08 -0.008427 | 0.019565 | -0.002480 | -0.024184 | 0.001656 | -0.046174 | -0.025000 | -0.029412 | 0.023599 | 0.000000 | -0.001489 | . 2017-09-11 0.019830 | 0.012435 | 0.012076 | 0.010905 | 0.014050 | 0.000000 | 0.000000 | 0.030303 | 0.014409 | 0.007937 | 0.010839 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2022-08-25 0.011494 | 0.020855 | 0.011975 | 0.014704 | 0.007171 | -0.017176 | -0.022472 | 0.000000 | -0.038462 | -0.044186 | 0.014092 | . 2022-08-26 -0.050000 | -0.036670 | -0.044075 | -0.043186 | -0.046677 | 0.016280 | -0.022989 | 0.000000 | -0.046667 | -0.068127 | -0.033688 | . 2022-08-29 0.009569 | -0.012358 | 0.004126 | -0.074423 | -0.005394 | -0.016490 | -0.023529 | 0.000000 | -0.011655 | -0.036554 | -0.006666 | . 2022-08-30 -0.019431 | -0.020391 | -0.014115 | -0.032510 | -0.027117 | 0.010778 | 0.048193 | 0.000000 | -0.056604 | 0.021680 | -0.011028 | . 2022-08-31 -0.014500 | 0.004179 | -0.015404 | -0.014337 | -0.024014 | -0.010664 | -0.034483 | 0.000000 | 0.007500 | -0.021220 | -0.007817 | . 1257 rows × 11 columns . #days will give us annualized simple returns. annualized_returns=daily_simple_returns.mean()*252 #sorting the annualized returns and displaying them high to low sorted_annualized_returns = annualized_returns.sort_values(ascending=False) #Plotting the bar graph based on the values. if returns are positive then color &#39;green&#39;. if returns are negative then color &#39;red&#39; col = [] for val in sorted_annualized_returns: if val &lt; 0.0: col.append(&#39;red&#39;) elif val &gt; 0.0: col.append(&#39;green&#39;) else: col.append(&#39;blue&#39;) #Plotting the annualized returns using bargraph plt.bar(sorted_annualized_returns.index,sorted_annualized_returns,color=col) plt.ylabel(&#39;Annualized Returns&#39;) plt.xlabel(&#39;Assets&#39;) plt.title(&#39;Annualized Returns of Assets&#39;) plt.xticks(rotation=90) plt.grid() plt.show() . 7 out of 10 stocks outperformed s&amp;p 500 index over the last 5 years when calculated annualized returns, while two stocks gave negative returns. Those two stocks belongs to the group of less institutional holdings. . Next we will be plotting series of histogram plots for each stock based on daily simple returns . we plot out the histogram using the .hist method and we specify the number of bins we want. The thicker our histogram is the more volatile the stock is.The width of the histogram shape is related to the standard deviation of the distribution. The higher it is the more variants we have, the variants of a certain distribution are directly related to the standard deviation. It&#8217;s actually the square value of the standard deviation, the higher the standard deviation is, the higher the variance is. The more volatility we have in terms of stock analysis. . daily_simple_returns[&#39;HGV&#39;].hist(bins=50, label=&#39;HGV&#39;) daily_simple_returns[&#39;HLT&#39;].hist(bins=50, label=&#39;HLT&#39;) daily_simple_returns[&#39;BERY&#39;].hist(bins=50, label=&#39;BERY&#39;) daily_simple_returns[&#39;CTLT&#39;].hist(bins=50, label=&#39;CTLT&#39;) daily_simple_returns[&#39;RMAX&#39;].hist(bins=50, label=&#39;RMAX&#39;) daily_simple_returns[&#39;SP500&#39;].hist(bins=50, label=&#39;SP500&#39;) plt.legend() plt.show() . daily_simple_returns[&#39;LINK&#39;].hist(bins=50, label=&#39;LINK&#39;) daily_simple_returns[&#39;PLAG&#39;].hist(bins=50, label=&#39;PLAG&#39;) daily_simple_returns[&#39;CSCW&#39;].hist(bins=50, label=&#39;CSCW&#39;) daily_simple_returns[&#39;AGRX&#39;].hist(bins=50, label=&#39;AGRX&#39;) daily_simple_returns[&#39;NEGG&#39;].hist(bins=50, label=&#39;NEGG&#39;) daily_simple_returns[&#39;SP500&#39;].hist(bins=50, label=&#39;SP500&#39;) plt.legend() plt.show() . The above two histogram charts shows us that, Group A stocks are more of normally distributed while Group B stocks skewed to left more. first group is not wide spread that means it&#39;s less voltail compared to second group. . daily_simple_returns.describe() #we are interested only in mean and standar deviation so we will be ignoring other parameters from decribe() function #and copying the output into a different dailyreturns_mean_std= daily_simple_returns.describe().T.loc[:,[&quot;mean&quot;,&quot;std&quot;]] #print(dailyreturns_mean_std) #converting mean and std into yearly dailyreturns_mean_std[&quot;mean&quot;] = dailyreturns_mean_std[&quot;mean&quot;]*252 dailyreturns_mean_std[&quot;std&quot;] = dailyreturns_mean_std[&quot;std&quot;]*np.sqrt(252) print(dailyreturns_mean_std) #Plotting the standard deviation and mean using scatter plot dailyreturns_mean_std.plot.scatter(fontsize=15, x=&quot;std&quot;,y=&quot;mean&quot;) for idx in dailyreturns_mean_std.index: plt.annotate(idx,xy=(dailyreturns_mean_std.loc[idx,&quot;std&quot;]+0.005,dailyreturns_mean_std.loc[idx,&quot;mean&quot;]+0.005)) . mean std HGV 0.137109 0.478074 HLT 0.193286 0.338259 BERY 0.041049 0.315851 CTLT 0.224395 0.371826 RMAX -0.082725 0.483783 LINK 0.587764 1.061536 PLAG 0.456646 1.831748 CSCW 0.688929 1.828506 AGRX -0.102383 1.636282 NEGG 0.893434 1.657620 SP500 0.115972 0.209672 . . Above scatter plot clearly indicates Group A stocks and S&amp;P 500 are close to each other and their mean and standard deviations are less compared to Group B stocks. This indicates instituional investors invest in low risk and moderate returns stock . Stock analysis based on Log returns . daily_log_returns=assets.pct_change().apply(lambda x:np.log(1+x)) daily_log_returns = log_daily_returns.dropna() #Printing the daily log returns print(daily_log_returns) #Calculating daily average returns daily_log_returns.mean() . HGV 0.000087 HLT 0.000540 BERY -0.000036 CTLT 0.000614 RMAX -0.000814 LINK 0.000123 PLAG -0.001971 CSCW -0.002061 AGRX -0.004643 NEGG -0.000799 SP500 0.000372 dtype: float64 . annualized_log_returns=daily_log_returns.mean()*252 #sorting the annualized returns and displaying them high to low sorted_annualized_log_returns = annualized_log_returns.sort_values(ascending=False) #Plotting the bar graph based on the values. if returns are positive then color &#39;green&#39;. if returns are negative then color &#39;red&#39; col = [] for val in sorted_annualized_log_returns: if val &lt; 0.0: col.append(&#39;red&#39;) elif val &gt; 0.0: col.append(&#39;green&#39;) else: col.append(&#39;blue&#39;) #Plotting the annualized returns using bargraph plt.bar(sorted_annualized_log_returns.index,sorted_annualized_log_returns,color= col) plt.ylabel(&#39;Annualized Log Returns&#39;) plt.xlabel(&#39;Assets&#39;) plt.title(&#39;Annualized Log Returns of Assets&#39;) plt.xticks(rotation=90) plt.grid() plt.show() . Log returns gives a compeletly different picture than simple stock returns. Only two stocks are giving better returns than s&amp;P 500, while the Group B stocks are underperforming and giving negative returns. . Next we will be plotting series of histogram plots for each stock based on daily log returns . daily_log_returns[&#39;HGV&#39;].hist(bins=50, label=&#39;HGV&#39;) daily_log_returns[&#39;HLT&#39;].hist(bins=50, label=&#39;HLT&#39;) daily_log_returns[&#39;BERY&#39;].hist(bins=50, label=&#39;BERY&#39;) daily_log_returns[&#39;CTLT&#39;].hist(bins=50, label=&#39;CTLT&#39;) daily_log_returns[&#39;RMAX&#39;].hist(bins=50, label=&#39;RMAX&#39;) daily_log_returns[&#39;SP500&#39;].hist(bins=50, label=&#39;SP500&#39;) plt.legend() plt.show() . daily_log_returns[&#39;LINK&#39;].hist(bins=50, label=&#39;LINK&#39;) daily_log_returns[&#39;PLAG&#39;].hist(bins=50, label=&#39;PLAG&#39;) daily_log_returns[&#39;CSCW&#39;].hist(bins=50, label=&#39;CSCW&#39;) daily_log_returns[&#39;AGRX&#39;].hist(bins=50, label=&#39;AGRX&#39;) daily_log_returns[&#39;NEGG&#39;].hist(bins=50, label=&#39;NEGG&#39;) daily_log_returns[&#39;SP500&#39;].hist(bins=50, label=&#39;SP500&#39;) plt.legend() plt.show() . The above two histogram charts shows us that, Group A stocks are more of normally distributed while Group B stocks skewed to left more. first group is not wide spread that means it&#39;s less voltail compared to second group. This is similiar to simple return. . daily_log_returns.describe() #we are interested only in mean and standar deviation so we will be ignoring other parameters from decribe() function #and copying the output into a different daily_log_returns_mean_std= daily_log_returns.describe().T.loc[:,[&quot;mean&quot;,&quot;std&quot;]] #print(daily_log_returns_mean_std) #converting mean and std into yearly daily_log_returns_mean_std[&quot;mean&quot;] = daily_log_returns_mean_std[&quot;mean&quot;]*252 daily_log_returns_mean_std[&quot;std&quot;] = daily_log_returns_mean_std[&quot;std&quot;]*np.sqrt(252) print(dailyreturns_mean_std) #Plotting the standard deviation and mean using scatter plot daily_log_returns_mean_std.plot.scatter(fontsize=18, x=&quot;std&quot;,y=&quot;mean&quot;) for idx in daily_log_returns_mean_std.index: plt.annotate(idx,xy=(daily_log_returns_mean_std.loc[idx,&quot;std&quot;]+0.005,daily_log_returns_mean_std.loc[idx,&quot;mean&quot;]+0.005)) . mean std HGV 0.137109 0.478074 HLT 0.193286 0.338259 BERY 0.041049 0.315851 CTLT 0.224395 0.371826 RMAX -0.082725 0.483783 LINK 0.587764 1.061536 PLAG 0.456646 1.831748 CSCW 0.688929 1.828506 AGRX -0.102383 1.636282 NEGG 0.893434 1.657620 SP500 0.115972 0.209672 . The above scatter plot indicates Group A stocks are performing very colse to the S&amp;p 500 index levels, where as Group B stocks are underperfroming and also they are very voltail. . Final outcome: . The Analysis shows Simple returns and Log returns gives different results and outcomes. In both the cases, Group A stocks are low risk and high return stocks compared to Group B stocks. That means, Higher Institutional holdings are considered as positive to the growth of the stock price. Also High Insitutional holding avoids the stock voltaility and inturn the risk. So retail investors should follow the Insitutional investors trade book and invest in low risk stocks rather than losing money in the high risky stocks. .",
            "url": "https://haripuduru.github.io/finalproject/fastpages/jupyter/2022/09/02/finalproject.html",
            "relUrl": "/fastpages/jupyter/2022/09/02/finalproject.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://haripuduru.github.io/finalproject/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://haripuduru.github.io/finalproject/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://haripuduru.github.io/finalproject/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://haripuduru.github.io/finalproject/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}